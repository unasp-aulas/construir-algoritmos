---
title: "Construção de Algorítmos e <br> Programação"
author: "Thiago Pires <br> --"
title-slide-attributes:
  data-background-image: cover.gif
  data-background-position: cover
format: 
  live-revealjs:
    theme: theme.scss
    width: 1600
    height: 900
    footer: "[github.com/unasp-aulas/construir-algoritmos](https://github.com/unasp-aulas/construir-algoritmos)"
html-math-method: mathjax
code-annotations: hover
embed-resources: false
ipynb-shell-interactivity: all
execute: 
  echo: true
---

# Introdução Python

## Variáveis

\

:::: columns
::: {.column width="48%" .addspace}
> Na programação, [variáveis]{.blue} são nomes que representam valores que podem ser manipulados durante a execução de um programa. Elas são elementos básicos, pois armazenam os dados que são necessários para o algoritmo.
:::
::: {.column width="48%"}
```{pyodide}
# Tipo inteiro (int)
x = 7
# Tipo sequência de caracteres (str)
y = "a" 
# Tipo ponto flutuante (float)
w = 5.6
# Tipo booleano (bool)
z = True
# Print da variável z
print(z)
```
:::
::::

## Condições

\

> [Condições]{.blue} na programação são expressões que podem ser verdadeiras ou falsas, e que são utilizadas para controlar o fluxo de execução de um programa.

\

:::: columns
::: {.column width="48%" .add-space}
```{pyodide}
x = 6

if x > 3:
  print("x é maior do que 3")
else:
  print("x é menor ou igual 3")
```
:::
::: {.column width="48%"}

### Exercício:
1. Altere o valor de `x` para que caia na condição alternativa.
2. Use o `elif` para construir uma terceira condição
:::
::::

## Repetições

\

:::: columns
::: {.column width="48%" .addspace}
> São comandos que são utilizados na programação [quando se deseja [repetir]{.blue}, determinada parte do código]{.mark}, mais de uma vez. Ou seja, ao invés de escrevermos o mesmo código duas ou mais vezes, utilizamos uma estrutura de [repetição]{.blue}
:::
::: {.column width="48%"}
```{pyodide}
x = 1
while x <= 5:
  print(x)
  x += 1
```
:::
::::

## Repetições

\

### Acumuladores

:::: columns
::: {.column width="48%" .addspace}
> Um [acumulador]{.blue} é uma variável que acumula valores durante as iterações de um laço

\

### Exercício
1. Reconstrua a rotina para que ela acumule o produto da mesma sequência gerada
:::
::: {.column width="48%"}
```{pyodide}
x = 1
soma = 0
while x <= 5:
  soma += x
  x += 1
print(f"Soma: {soma}")
```
:::
::::

## Estrutura de dados

\

> As [estruturas de dados]{.blue} servem para organizar, manipular e acessar dados em diversos formatos 

\

### Lista

:::: columns
::: {.column width="40%" .addspace}
> Uma [lista]{.blue} é uma estrutura de dados que armazena uma sequência de valores, também chamados de elementos ou itens. Para extrair um elemento de uma lista pode usar a indexação numérica
:::
::: {.column width="56%"}
```{pyodide}
x = [1, 5, 3, "b", "a", [True, False]]
# Retorna o sexto elemento da lista e o primeiro da lista aninhada
x[5][0]
```
:::
::::

## Lista

\

### Utilizando `for`

\

:::: columns
::: {.column width="45%" .addspace}
O `for` é uma forma mais prática de trabalhar com repetições quando estamos operando sobre uma lista

```{python}
for i in [1, 2, 3, 4]:
  print(i**2)
```
:::
::: {.column width="51%"}

Quando tanto a entrada quanto a saída é uma lista podemos reescrever o for no que chamamos de [list comprehention]{.blue}

```{pyodide}
[i**2 for i in [1, 2, 3, 4]]
```
:::
::::

# Aplicações

## Consultando o endereço através do CEP

<https://viacep.com.br/>

\

```{python}
import requests

# Função que fará requisição à API
def consulta_cep(cep):
  url = f"https://viacep.com.br/ws/{cep}/json/"
  res = requests.get(url)
  res = res.json()
  return (res['logradouro'], res['uf'])

# Lista de CEPs para consulta
lista_cep = ["13186642",
             "13178574",
             "13188020",
             "13184321",
             "20720293"]

[consulta_cep(cep)[0] for cep in lista_cep if consulta_cep(cep)[1] == "SP"]
```

## Consultado a cotação do Dólar

<https://dadosabertos.bcb.gov.br/dataset/dolar-americano-usd-todos-os-boletins-diarios>

\

```{python}
import requests
def cotar(data):
  url = f"https://olinda.bcb.gov.br/olinda/servico/PTAX/versao/v1/odata/CotacaoDolarDia(dataCotacao=@dataCotacao)?%40dataCotacao='{data}'&%24format=json"
  res = requests.get(url)
  res = res.json()
  return res['value'][0]['cotacaoVenda']

cotar("08282024")
```

\

Esta função só funciona para dias úteis excluindo sábado domingo e feriado, como poderíamos modificar para que caso faça a cotação em um dia *não útil* a função traga a última cotação válida.

## Consultado a cotação do Dólar

\

Para resolver este problema precisamos ententender como o Python lida com datas. É possível transformar uma string `"08122024"` em um tipo de dado `datetime`. O argumento `"%m%d%Y"` é para identificar como a estrutura da data está sendo recebida - mês, dia e ano 

```{python}
from datetime import datetime
datetime.strptime("08122024", "%m%d%Y")
```

Convertendo a `str` em um tipo de dado `datetime` é possível fazer algumas manipulações que são apenas possíveis com este tipo. É possível descobrir qual o dia anterior à `"08122024"`

```{pyodide}
from datetime import datetime, timedelta
datetime.strptime("08122024", "%m%d%Y") - timedelta(1)
```

## Consultado a cotação do Dólar

\

Para retornar de um tipo `datetime` para uma *string*, com a estrutura `"%m%d%Y"`,pode-se utilizar a função `strftime`

```{python}
from datetime import datetime, timedelta
data = datetime.strptime("08122024", "%m%d%Y") - timedelta(1)
datetime.strftime(data, "%m%d%Y") 
```

## Consultado a cotação do Dólar

\

Nos dias *não úteis* a API retorna uma lista vazia na chave `value`


```{python}
data = "09012024"

url = f"https://olinda.bcb.gov.br/olinda/servico/PTAX/versao/v1/odata/CotacaoDolarDia(dataCotacao=@dataCotacao)?%40dataCotacao='{data}'&%24format=json"
res = requests.get(url)
res = res.json()
print(res)
```

## Consultado a cotação do Dólar

\

```{python}
import requests

def cotar(data):
  url = fr"https://olinda.bcb.gov.br/olinda/servico/PTAX/versao/v1/odata/CotacaoDolarDia(dataCotacao=@dataCotacao)?@dataCotacao='{data}'&$format=json"
  res = requests.get(url)
  res = res.json()
  if res['value']: 
    return res['value'][0]['cotacaoVenda']
  else:
    dia_anterior = datetime.strptime(data, "%m%d%Y") - timedelta(1)
    dia_anterior = datetime.strftime(dia_anterior, "%m%d%Y")
    return cotar(dia_anterior)

[cotar(i) for i in ["09022024", "09012024", "08312024", "08302024", "08292024"]]
```

## Monitoramento da frota de ônibus

\

A [API do Olho Vivo](https://www.sptrans.com.br/desenvolvedores/api-do-olho-vivo-guia-de-referencia/) provê informações em tempo real do monitoramento da frota de ônibus da cidade de São Paulo. Para ter acesso:

\

- [Crie uma conta](https://www.sptrans.com.br/desenvolvedores/cadastro-desenvolvedores/)
- [Acesse seu perfil e crie um aplicativo](https://www.sptrans.com.br/desenvolvedores/perfil-desenvolvedor/)
- [Leia a documentação para ver as possibilidades](https://www.sptrans.com.br/desenvolvedores/api-do-olho-vivo-guia-de-referencia/documentacao-api/)

## Monitoramento de frota de ônibus

### Autenticação

\

```{python}
import os
import requests
from dotenv import load_dotenv

load_dotenv("../.env")  # <1>

s = requests.Session()  # <2>
s.post( # <3>
    f"http://api.olhovivo.sptrans.com.br/v2.1/Login/Autenticar?token={os.getenv('SPTRANS_TOKEN')}" # <3>
)  # <3>
```

1. Ler o arquivo tendo o token como variável de ambiente
2. Persistir uma sessão após autenticar
3. Fazer uma requisição com `post` incluindo o token

## Monitoramento de frota de ônibus

### Busca por linhas segundo termos

\

```{python}
linhas_lapa = s.get( # <1>
    "http://api.olhovivo.sptrans.com.br/v2.1/Linha/Buscar?termosBusca=Lapa" # <1>
)  # <1>
linhas_lapa = linhas_lapa.json()
linhas_lapa[:3]  # <2>
```

1. Utilizando o método `get` para requisitar as linhas de ônibus segundo a busca pelo termo "Lapa"
2. Mostrando uma lista com a 3 primeitas linhas encontradas

## Monitoramento de frota de ônibus

### Busca por paradas

\

```{python}
res = s.get( # <1>
    "http://api.olhovivo.sptrans.com.br/v2.1/Parada/BuscarParadasPorLinha?codigoLinha=2506" # <1>
) # <1>
paradas = res.json()
paradas[:3]  # <2>
```

1. Requisição das paradas de ônibus com o nome, endereço e coordenada segundo o código da linha (as chaves `cl` na saída anterior)
2. Lista com as informações das 3 primeiras paradas

## Monitoramento de frota de ônibus

### Paradas de ônibus no mapa

\

```{python}
# | eval: false
from folium import Map, Marker

m = Map(location=[paradas[3]["py"], paradas[3]["px"]], zoom_start=14)
for i in paradas:
    Marker(location=[i["py"], i["px"]], popup=i["np"]).add_to(m)
m.save("2506.html")
```

\

<center>
```{=html}
<iframe width="900" height="350" src="2506.html"></iframe>
```
</center>

## Monitoramento de frota de ônibus

### Posições em tempo real

\

```{python}
#| eval: false
pos = s.get(
    "http://api.olhovivo.sptrans.com.br/v2.1//Posicao/Linha?codigoLinha=2506"
)  # <1>
pos.json()
```

1. Requisição da posição do ônibus segundo o código da linha informada

```
{'hr': '22:06',
 'vs': [{'p': '12783',
   'a': True,
   'ta': '2024-09-27T01:05:47Z',
   'py': -23.53531725,
   'px': -46.653005,
   'sv': None,
   'is': None},
  {'p': '12534',
   'a': True,
   'ta': '2024-09-27T01:06:10Z',
   'py': -23.547649,
   'px': -46.641011500000005,
   'sv': None,
   'is': None},
  {'p': '12592',
   'a': True,
   'ta': '2024-09-27T01:05:57Z',
   'py': -23.5325365,
   'px': -46.657965250000004,
   'sv': None,
   'is': None},
  {'p': '12782',
   'a': True,
   'ta': '2024-09-27T01:05:45Z',
   'py': -23.520449499999998,
   'px': -46.6996115,
   'sv': None,
   'is': None}]}
```

## Bot no Telegram

\

:::: columns
::: {.column}
- Um bot poderá ser criado através de uma interação com o próprio bot do Telegram *BotFather* como mostrado na imagem
- É necessário definir um nome, username e em seguida obter um token para ser utilizado nas requisições
- Referência principal das APIs: <https://core.telegram.org/bots/api#available-methods>
:::
::: {.column}
<center>
![](BotFather.jpeg){width="50%"}
</center>
:::
::::


## Bot no Telegram

### Obtendo updates

\

```{.python}
import requests
import os
from dotenv import load_dotenv
load_dotenv("../.env")
updates = requests.get(f"https://api.telegram.org/bot{os.getenv('TELEGRAM_TOKEN')}/getUpdates")
updates = updates.json()
updates["result"][-1]
```

```
{'update_id': 80721953,
 'message': {'message_id': 9,
  'from': {'id': 1042885840,
   'is_bot': False,
   'first_name': 'Thiago',
   'last_name': 'Pires',
   'username': 'th1460',
   'language_code': 'pt-br'},
  'chat': {'id': 1042885840,
   'first_name': 'Thiago',
   'last_name': 'Pires',
   'username': 'th1460',
   'type': 'private'},
  'date': 1726967971,
  'text': 'Oi'}}
```

## Bot no Telegram

### Enviando mensagem

\

```{.python}
requests.post(
        url=f"https://api.telegram.org/bot{os.getenv('TELEGRAM_TOKEN')}/sendMessage",
        data={"chat_id": 1042885840, "text": "Olá tudo bem?"}
    ).json()
```

```
{'ok': True,
 'result': {'message_id': 10,
  'from': {'id': 7627305412,
   'is_bot': True,
   'first_name': 'thop',
   'username': 'th0pbot'},
  'chat': {'id': 1042885840,
   'first_name': 'Thiago',
   'last_name': 'Pires',
   'username': 'th1460',
   'type': 'private'},
  'date': 1726968004,
  'text': 'Olá tudo bem?'}}
```