---
title: "Construção de Algorítmos e <br> Programação"
author: "Thiago Pires <br> --"
title-slide-attributes:
  data-background-image: cover.gif
  data-background-position: cover
format: 
  live-revealjs:
    theme: theme.scss
    width: 1600
    height: 900
    footer: "[github.com/unasp-aulas/construir-algoritmos](https://github.com/unasp-aulas/construir-algoritmos)"
    mermaid-format: svg
html-math-method: mathjax
code-annotations: hover
embed-resources: false
ipynb-shell-interactivity: all
execute: 
  echo: true
---

# Introdução Python

## Variáveis

\

:::: columns
::: {.column width="48%" .addspace}
> Na programação, [variáveis]{.blue} são nomes que representam valores que podem ser manipulados durante a execução de um programa. Elas são elementos básicos, pois armazenam os dados que são necessários para o algoritmo.
:::
::: {.column width="48%"}
```{pyodide}
# Tipo inteiro (int)
x = 7
# Tipo sequência de caracteres (str)
y = "a" 
# Tipo ponto flutuante (float)
w = 5.6
# Tipo booleano (bool)
z = True
# Print da variável z
print(z)
```
:::
::::

## Condições

\

> [Condições]{.blue} na programação são expressões que podem ser verdadeiras ou falsas, e que são utilizadas para controlar o fluxo de execução de um programa.

\

:::: columns
::: {.column width="48%" .add-space}
```{pyodide}
x = 6

if x > 3:
  print("x é maior do que 3")
else:
  print("x é menor ou igual 3")
```
:::
::: {.column width="48%"}

### Exercício:
1. Altere o valor de `x` para que caia na condição alternativa.
2. Use o `elif` para construir uma terceira condição
:::
::::

## Repetições

\

:::: columns
::: {.column width="48%" .addspace}
> São comandos que são utilizados na programação [quando se deseja [repetir]{.blue}, determinada parte do código]{.mark}, mais de uma vez. Ou seja, ao invés de escrevermos o mesmo código duas ou mais vezes, utilizamos uma estrutura de [repetição]{.blue}
:::
::: {.column width="48%"}
```{pyodide}
x = 1
while x <= 5:
  print(x)
  x += 1
```
:::
::::

## Repetições

\

### Acumuladores

:::: columns
::: {.column width="48%" .addspace}
> Um [acumulador]{.blue} é uma variável que acumula valores durante as iterações de um laço

\

### Exercício
1. Reconstrua a rotina para que ela acumule o produto da mesma sequência gerada
:::
::: {.column width="48%"}
```{pyodide}
x = 1
soma = 0
while x <= 5:
  soma += x
  x += 1
print(f"Soma: {soma}")
```
:::
::::

## Estrutura de dados ^[Ver <https://docs.python.org/3/tutorial/datastructures.html>]

\

> As [estruturas de dados]{.blue} servem para organizar, manipular e acessar dados em diversos formatos

## Lista

:::: columns
::: {.column width="40%" .addspace}
> Uma [lista]{.blue} é uma estrutura de dados que armazena uma sequência de valores, também chamados de elementos ou itens. Para extrair um elemento de uma lista pode usar a indexação numérica
:::
::: {.column width="56%"}
```{pyodide}
x = [1, 5, 3, "b", "a", [True, False]]
# Retorna o sexto elemento da lista e o primeiro da lista aninhada
x[5][0]
```
:::
::::

## Lista

\

### Utilizando `for`

\

:::: columns
::: {.column width="45%" .addspace}
O `for` é uma forma mais prática de trabalhar com repetições quando estamos operando sobre uma lista

```{python}
for i in [1, 2, 3, 4]:
    print(i**2)
```
:::
::: {.column width="51%"}

Quando tanto a entrada quanto a saída é uma lista podemos reescrever o `for` no que chamamos de [list comprehention]{.blue}

```{pyodide}
[i**2 for i in [1, 2, 3, 4]]
```
:::
::::

## Tupla

\

> Uma tupla é uma coleção ordenada e imutável de itens, semelhante a uma lista, mas cujos elementos não podem ser alterados, adicionados ou removidos após sua criação. [É uma estrutura de dados útil para agrupar informações relacionadas, como coordenadas de um ponto (x, y)]{.mark}, e é representada por valores separados por vírgulas, geralmente entre parênteses. 

```{python}
# | error: true
tupla = (1, 2, 3, 4, 5)
tupla[3] = 2.9
```

## Dicionário

\

> Um dicionário Python é uma coleção de pares chave-valor, [onde cada chave é única e usada para acessar um valor específico, semelhante a um glossário.]{.mark} Diferente das listas, você não usa um índice numérico, mas sim uma chave para encontrar os dados. Os dicionários são mutáveis, permitindo adicionar, alterar ou remover elementos após sua criação. 

```{python}
dados = {"nome": "João", "idade": 45, "hobby": ["ler", "skate"], "estuda": True}
dados["hobby"]
```

## Conjunto

::: {.columns}
::: {.column}
> Um *set* (conjunto) é uma coleção não ordenada e mutável de elementos únicos. Ele remove automaticamente duplicados e é eficiente para operações como verificação de pertinência de um elemento ou a realização de operações matemáticas de conjuntos, como união ou interseção.
:::
::: {.column}
```{python}
A = {1, 2, 3}
B = {3, 4, 5}
A | B
A & B
A - B
B - A
A ^ B
2 in A
```
:::
:::

# Algoritmos
> *Um algoritmo é um conjunto de instruções finitas para a realização de uma tarefa*.

## Pesquisa sequencial

\

Fazendo uma busca sequencial de um item dentro da lista.

```{python}
def pesquisa_sequencial(lista, item):
  for i, j in enumerate(lista):
    if j == item:
      return i
```

Um exemplo

```{python}
pesquisa_sequencial([7, 9, 12, 15, 16, 18, 22], 15)
```

## Pesquisa binária

::: {.columns}
::: {.column}
> A pesquisa binária é um algoritmo eficiente para encontrar um elemento em uma lista ordenada. Ela funciona dividindo repetidamente a lista ao meio e comparando o valor do meio com o valor que estamos procurando, descartando metade da lista a cada passo.
:::
::: {.column}
<center>
```{mermaid}
%%| echo: false
%%| fig-height: 8
%%| fig-width: 10 
graph TD
    A["[3, 8, 15, 23, 42, 56, 78]"] --> B["Passo 1: Meio = 23"]
    B -->|42 > 23| C["Descarta metade esquerda"]
    C --> D["Nova lista [42, 56, 78]"]
    D --> E["Passo 2: Meio = 56"]
    E -->|42 < 56| F["Descarta metade direita"]
    F --> G["Nova lista [42]"]
    G --> H["Passo 3: Meio = 42"]
    H --> I["Encontrado!"]
```
</center>
:::
:::

## Pesquisa binária

::: {.columns}
::: {.column}
1. Comece com os índices do início e do fim da lista.
2. Encontre o elemento do meio.
3. Compare o valor do meio com o valor procurado:
  - Se for igual, encontrou!
  - Se o valor procurado for menor, repita a busca na metade esquerda.
  - Se for maior, repita na metade direita.
4. Repita até encontrar o valor ou até que a sublista esteja vazia.
:::
::: {.column}
```{.python}
def pesquisa_binaria(lista, item):
  baixo = 0
  alto = len(lista) - 1

  while baixo <= alto:
    meio = (baixo + alto) // 2
    chute = lista[meio]
    if chute == item:
      return meio
    elif chute > item:
      alto = meio - 1
    else:
      baixo = meio + 1
  return None
```
:::
:::

## Complexidade de tempo do algoritmo

\

A complexidade *Big O* (ou notação assintótica) [é uma forma de descrever o comportamento de um algoritmo em termos de tempo ou espaço conforme o tamanho da entrada cresce]{.mark}. **Ela não mede o tempo exato de execução, mas sim como o tempo cresce com o aumento da entrada.**

\

Imagine que você tem um algoritmo que precisa processar uma lista de números. [A complexidade Big O te diz quantas operações/tentativas (aproximadamente) ele vai fazer à medida que a lista cresce.]{.mark}

## Complexidade de tempo do algoritmo

\

Na pesquisa binária, a cada passo você divide a lista pela metade. Isso significa que o número de passos cresce logaritmicamente com o tamanho da lista ou $O(log(n))$:

- Lista com 8 elementos &#8594; no máximo 3 passos (porque $log_2 8 = 3$)
- Lista com 1000000 elementos &#8594; no máximo 20 passos (porque $log_2 1000000 \approx 20$)

\

Na pesquisa sequencial, o número de tentativas é igual ao número de elementos na lista $O(n)$

- Lista com 8 elementos &#8594; no máximo 8 passos
- Lista com 1000000 elementos &#8594; no máximo 1000000 passos

## Por que $O(log(n))$?

\

1. Tamanho inicial da lista: $n$
2. Após 1 passo: $\frac{n}{2}$
3. Após 2 passos $\frac{n}{4} = \frac{n}{2^2}$
4. Após 3 passos $\frac{n}{8} = \frac{n}{2^3}$
5. Após $k$ passos $\frac{n}{2^k}$

Queremos saber quantos passos $k$ são necessários para que (igualamos a 1 porque queremos saber quantos passos são necessários para que no final só tenha 1 elemento):

$$\frac{n}{2^k}=1$$

$$n=2^k \Rightarrow log_2(n) = log_2(2^k)=k$$

## Exercícios com pesquisa binária

\

1. Quantos números primos são menores que 67 
```
primos = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]
```

2. Qual o nome associado ao número 256 e quantas tentativas foram feitas? Quantas tentativas seriam em uma pesquisa sequencial?

```
lista = [
    (3, 'Ana'), (10, 'Bruno'), (15, 'Carlos'), (18, 'Daniela'), (19, 'Eduardo'),
    (28, 'Fernanda'), (33, 'Gustavo'), (35, 'Helena'), (43, 'Igor'), (48, 'Juliana'),
    (58, 'Kleber'), (83, 'Larissa'), (84, 'Marcos'), (86, 'Natália'), (97, 'Otávio'),
    (104, 'Patrícia'), (106, 'Rafael'), (115, 'Sabrina'), (120, 'Tiago'), (122, 'Vanessa'),
    (127, 'Amanda'), (143, 'Breno'), (147, 'Camila'), (149, 'Diego'), (151, 'Eliane'),
    (175, 'Fabiano'), (179, 'Gabriela'), (184, 'Henrique'), (187, 'Isabela'), (194, 'João'),
    (199, 'Karen'), (201, 'Leonardo'), (211, 'Mirela'), (213, 'Nicolas'), (232, 'Olívia'),
    (241, 'Pedro'), (244, 'Queila'), (246, 'Rodrigo'), (256, 'Simone'), (258, 'Túlio'),
    (259, 'Ursula'), (261, 'Victor'), (269, 'Wesley'), (273, 'Xênia'), (278, 'Yasmin'),
    (280, 'Zeca'), (288, 'Alana'), (291, 'Caio'), (292, 'Diana'), (294, 'Fábio')
]
```

## Ordenação por seleção

::: {.columns}
::: {.column}
Suponha que você tenha um monte de músicas no seu computador. Para cada artista, você tem um contador de plays

\

Você quer ordenar uma lista de artistas, do artista mais tocado para o menos tocado, para que possa categorizar os seus artistas favoritos. Como pode fazer isso?

> A ordenação por seleção é um algoritmo de ordenação simples que funciona selecionando repetidamente o menor elemento de uma lista não ordenada e movendo-o para o início da parte ordenada da lista.
:::
::: {.column}

<center>
| &#127925;            | Contador <br> de plays |
|:--------------------:|:-----------------:|
| Adoradores 5         | 95                |
| Anthony Evans        | 78                |
| Arautos do Rei       | 136               |
| Avalon               | 111               |
| Cain                 | 48                |
| Grupo Versos         | 101               |
| Novo Tom             | 58                |
</center>
:::
:::

## Ordenação por seleção

\

::: {.columns}
::: {.column}
```{python}
def buscaMenor(arr):
  menor = arr[0] #<1>
  menor_indice = 0 #<2>
  for i in range(1, len(arr)):
    if arr[i] < menor:
      menor = arr[i]
      menor_indice = i
  return menor_indice
```

1. Armazena o menor valor.
2. Armazena o índice do menor valor.

:::
::: {.column}
```{python}
def ordenacaoporSelecao(arr): #<1>
  novoArr = []
  for i in range(len(arr)):
    menor = buscaMenor(arr) #<2>
    novoArr.append(arr.pop(menor))
  return novoArr

print(ordenacaoporSelecao([10, 5, 2, 3]))
```

1. Ordenação em um array.
2. Encontra o menor elemento do array e adiciona ao novo array.
:::
:::

Complexidade O($n^2$): O algoritmo precisa percorrer todos os elementos em cada uma de suas iterações para encontrar o próximo menor elemento. A complexidade de tempo é dominada pelo número de comparações realizadas pelos loops aninhados, que cresce quadraticamente com o tamanho da lista (n)

## Recursividade

\

> [Recursividade]{.blue} é um mecanismo de programação que permite que uma função ou objeto se refira a si mesmo. Em outras palavras, uma função recursiva é uma função que se define em termos de si mesma.

## Fatorial

\


```{python}
def factorial(n):
  if n <= 1:
    return 1
  else:
    return n * factorial(n - 1)

factorial(5)
```

## Fibonacci

\

```{python}
def fibonacci(n):
  if n <= 1:
    return 1
  else:
    return fibonacci(n - 1) + fibonacci(n - 2)

fibonacci(7)
```

\

```{python}
[fibonacci(n) for n in range(8)]
```

## Soma acumulada

\

```{python}
def cumsum(x):
  if x < 0:
    return 0
  else:
    return x + cumsum(x - 1)

cumsum(5)
```

## Quicksort

\

> O `quicksort` é um algoritmo de ordenação. Este algoritmo é muito mais rápido do que a ordenação por seleção e é muito utilizado na prática. Por exemplo, a biblioteca padrão da linguagem C tem uma função chamada `qsort` que é uma implementação do `quicksort`. Este algorítmo utiliza a estratégia *dividir para conquistar*.

Qual é o array mais simples que um algoritmo de ordenação pode ordenar? `[]` &#8592; *array vazio* e `[20]` &#8592; *array com um elemento*.

## Quicksort

\

```{python}
def quicksort(arr):
  if len(arr) < 2:
    return arr
  else:
    pivo = arr[0]
    menores = [i for i in arr[1:] if i <= pivo]
    maiores = [i for i in arr[1:] if i > pivo]
    return quicksort(menores) + [pivo] + quicksort(maiores)

print(quicksort([10, 5, 2, 3]))
```

## Complexidade do Quicksort

A complexidade do Quicksort varia conforme a escolha do pivô e a distribuição dos dados. [Em média, o algoritmo apresenta uma complexidade de tempo $O(n log_2(n))$, considerada ideal. Esse desempenho ocorre quando o pivô divide o array em duas partes aproximadamente iguais]{.mark}, permitindo que cada chamada recursiva processe subarrays menores de forma eficiente.
Por outro lado, [o pior caso acontece quando o pivô escolhido é o primeiro ou o último elemento e não realiza uma divisão equilibrada dos dados]{.mark}. Isso gera partições muito desbalanceadas, resultando em uma complexidade de tempo $O(n^2)$. Nessa situação, o algoritmo precisa realizar muitas comparações e chamadas recursivas, o que compromete significativamente sua performance.

# Aplicações

## Consultando o endereço através do CEP

<https://viacep.com.br/>

\

```{.python}
import requests

# Função que fará requisição à API
def consulta_cep(cep):
  url = f"https://viacep.com.br/ws/{cep}/json/"
  res = requests.get(url)
  res = res.json()
  return (res['logradouro'], res['uf'])

# Lista de CEPs para consulta
lista_cep = ["13186642",
             "13178574",
             "13188020",
             "13184321",
             "20720293"]

[consulta_cep(cep)[0] for cep in lista_cep if consulta_cep(cep)[1] == "SP"]
```

## Consultado a cotação do Dólar

<https://dadosabertos.bcb.gov.br/dataset/dolar-americano-usd-todos-os-boletins-diarios>

\

```{python}
import requests
def cotar(data):
  url = f"https://olinda.bcb.gov.br/olinda/servico/PTAX/versao/v1/odata/CotacaoDolarDia(dataCotacao=@dataCotacao)?%40dataCotacao='{data}'&%24format=json"
  res = requests.get(url)
  res = res.json()
  return res['value'][0]['cotacaoVenda']

cotar("08282024")
```

\

Esta função só funciona para dias úteis excluindo sábado domingo e feriado, como poderíamos modificar para que caso faça a cotação em um dia *não útil* a função traga a última cotação válida.

## Consultado a cotação do Dólar

\

Para resolver este problema precisamos ententender como o Python lida com datas. É possível transformar uma string `"08122024"` em um tipo de dado `datetime`. O argumento `"%m%d%Y"` é para identificar como a estrutura da data está sendo recebida - mês, dia e ano 

```{python}
from datetime import datetime
datetime.strptime("08122024", "%m%d%Y")
```

Convertendo a `str` em um tipo de dado `datetime` é possível fazer algumas manipulações que são apenas possíveis com este tipo. É possível descobrir qual o dia anterior à `"08122024"`

```{pyodide}
from datetime import datetime, timedelta
datetime.strptime("08122024", "%m%d%Y") - timedelta(1)
```

## Consultado a cotação do Dólar

\

Para retornar de um tipo `datetime` para uma *string*, com a estrutura `"%m%d%Y"`,pode-se utilizar a função `strftime`

```{python}
from datetime import datetime, timedelta
data = datetime.strptime("08122024", "%m%d%Y") - timedelta(1)
datetime.strftime(data, "%m%d%Y") 
```

## Consultado a cotação do Dólar

\

Nos dias *não úteis* a API retorna uma lista vazia na chave `value`


```{python}
data = "09012024"

url = f"https://olinda.bcb.gov.br/olinda/servico/PTAX/versao/v1/odata/CotacaoDolarDia(dataCotacao=@dataCotacao)?%40dataCotacao='{data}'&%24format=json"
res = requests.get(url)
res = res.json()
print(res)
```

## Consultado a cotação do Dólar

\

```{python}
import requests

def cotar(data):
  url = fr"https://olinda.bcb.gov.br/olinda/servico/PTAX/versao/v1/odata/CotacaoDolarDia(dataCotacao=@dataCotacao)?@dataCotacao='{data}'&$format=json"
  res = requests.get(url)
  res = res.json()
  if res['value']: 
    return res['value'][0]['cotacaoVenda']
  else:
    dia_anterior = datetime.strptime(data, "%m%d%Y") - timedelta(1)
    dia_anterior = datetime.strftime(dia_anterior, "%m%d%Y")
    return cotar(dia_anterior)

[cotar(i) for i in ["09022024", "09012024", "08312024", "08302024", "08292024"]]
```

## Monitoramento da frota de ônibus

\

A [API do Olho Vivo](https://www.sptrans.com.br/desenvolvedores/api-do-olho-vivo-guia-de-referencia/) provê informações em tempo real do monitoramento da frota de ônibus da cidade de São Paulo. Para ter acesso:

\

- [Crie uma conta](https://www.sptrans.com.br/desenvolvedores/cadastro-desenvolvedores/)
- [Acesse seu perfil e crie um aplicativo](https://www.sptrans.com.br/desenvolvedores/perfil-desenvolvedor/)
- [Leia a documentação para ver as possibilidades](https://www.sptrans.com.br/desenvolvedores/api-do-olho-vivo-guia-de-referencia/documentacao-api/)

## Monitoramento de frota de ônibus

### Autenticação

\

```{python}
import os
import requests
from dotenv import load_dotenv

load_dotenv("../.env")  # <1>

s = requests.Session()  # <2>
s.post( # <3>
    f"http://api.olhovivo.sptrans.com.br/v2.1/Login/Autenticar?token={os.getenv('SPTRANS_TOKEN')}" # <3>
)  # <3>
```

1. Ler o arquivo tendo o token como variável de ambiente
2. Persistir uma sessão após autenticar
3. Fazer uma requisição com `post` incluindo o token

## Monitoramento de frota de ônibus

### Busca por linhas segundo termos

\

```{python}
linhas_lapa = s.get( # <1>
    "http://api.olhovivo.sptrans.com.br/v2.1/Linha/Buscar?termosBusca=Lapa" # <1>
)  # <1>
linhas_lapa = linhas_lapa.json()
linhas_lapa[:3]  # <2>
```

1. Utilizando o método `get` para requisitar as linhas de ônibus segundo a busca pelo termo "Lapa"
2. Mostrando uma lista com a 3 primeitas linhas encontradas

## Monitoramento de frota de ônibus

### Busca por paradas

\

```{python}
res = s.get( # <1>
    "http://api.olhovivo.sptrans.com.br/v2.1/Parada/BuscarParadasPorLinha?codigoLinha=2506" # <1>
) # <1>
paradas = res.json()
paradas[:3]  # <2>
```

1. Requisição das paradas de ônibus com o nome, endereço e coordenada segundo o código da linha (as chaves `cl` na saída anterior)
2. Lista com as informações das 3 primeiras paradas

## Monitoramento de frota de ônibus

### Paradas de ônibus no mapa

\

```{python}
# | eval: false
from folium import Map, Marker

m = Map(location=[paradas[3]["py"], paradas[3]["px"]], zoom_start=14)
for i in paradas:
    Marker(location=[i["py"], i["px"]], popup=i["np"]).add_to(m)
m.save("2506.html")
```

\

<center>
```{=html}
<iframe width="900" height="350" src="2506.html"></iframe>
```
</center>

## Monitoramento de frota de ônibus

### Posições em tempo real

\

```{python}
#| eval: false
pos = s.get(
    "http://api.olhovivo.sptrans.com.br/v2.1//Posicao/Linha?codigoLinha=2506"
)  # <1>
pos.json()
```

1. Requisição da posição do ônibus segundo o código da linha informada

```
{'hr': '22:06',
 'vs': [{'p': '12783',
   'a': True,
   'ta': '2024-09-27T01:05:47Z',
   'py': -23.53531725,
   'px': -46.653005,
   'sv': None,
   'is': None},
  {'p': '12534',
   'a': True,
   'ta': '2024-09-27T01:06:10Z',
   'py': -23.547649,
   'px': -46.641011500000005,
   'sv': None,
   'is': None},
  {'p': '12592',
   'a': True,
   'ta': '2024-09-27T01:05:57Z',
   'py': -23.5325365,
   'px': -46.657965250000004,
   'sv': None,
   'is': None},
  {'p': '12782',
   'a': True,
   'ta': '2024-09-27T01:05:45Z',
   'py': -23.520449499999998,
   'px': -46.6996115,
   'sv': None,
   'is': None}]}
```

## Bot no Telegram

\

:::: columns
::: {.column}
- Um bot poderá ser criado através de uma interação com o próprio bot do Telegram *BotFather* como mostrado na imagem
- É necessário definir um nome, username e em seguida obter um token para ser utilizado nas requisições
- Referência principal das APIs: <https://core.telegram.org/bots/api#available-methods>
:::
::: {.column}
<center>
![](BotFather.jpeg){width="50%"}
</center>
:::
::::


## Bot no Telegram

### Obtendo updates

\

```{.python}
import requests
import os
from dotenv import load_dotenv
load_dotenv("../.env")
updates = requests.get(f"https://api.telegram.org/bot{os.getenv('TELEGRAM_TOKEN')}/getUpdates")
updates = updates.json()
updates["result"][-1]
```

```
{'update_id': 80721953,
 'message': {'message_id': 9,
  'from': {'id': 1042885840,
   'is_bot': False,
   'first_name': 'Thiago',
   'last_name': 'Pires',
   'username': 'th1460',
   'language_code': 'pt-br'},
  'chat': {'id': 1042885840,
   'first_name': 'Thiago',
   'last_name': 'Pires',
   'username': 'th1460',
   'type': 'private'},
  'date': 1726967971,
  'text': 'Oi'}}
```

## Bot no Telegram

### Enviando mensagem

\

```{.python}
requests.post(
        url=f"https://api.telegram.org/bot{os.getenv('TELEGRAM_TOKEN')}/sendMessage",
        data={"chat_id": 1042885840, "text": "Olá tudo bem?"}
    ).json()
```

```
{'ok': True,
 'result': {'message_id': 10,
  'from': {'id': 7627305412,
   'is_bot': True,
   'first_name': 'thop',
   'username': 'th0pbot'},
  'chat': {'id': 1042885840,
   'first_name': 'Thiago',
   'last_name': 'Pires',
   'username': 'th1460',
   'type': 'private'},
  'date': 1726968004,
  'text': 'Olá tudo bem?'}}
```

# Matrizes

## Matrizes

\

::: {.columns}
::: {.column}
[Matriz]{.blue} é uma tabela organizada em linhas e colunas no formato $m\times n$, onde $m$ representa o número de linhas (horizontal) e $n$ o número de colunas (vertical).

\

A função das matrizes é relacionar dados numéricos. Por isso, o conceito de matriz não é só importante na Matemática, mas também em outras áreas já que as matrizes têm diversas aplicações.
:::
::: {.column}
$$
A = \begin{bmatrix}
a_{11} & a_{12} & a_{13} \\
a_{21} & a_{22} & a_{23} \\
a_{31} & a_{32} & a_{33} \\
\end{bmatrix}
$$
:::
:::

## Matriz em python

\

Matriz pode ser definida como uma lista de listas

```{python}
[[1, 2, 3], [4, 5, 6], [7, 8, 9]]
```

\

Criando uma matriz com [*list comprehension*]{.blue}

```{python}
matrix = [[column for column in range(4)] for row in range(4)]
print(matrix)
```

\

Acessando os valores de uma matrix

```{python}
matrix[2][3]
```

## Matrizes com `numpy`

\

::: {.columns}
::: {.column}

[NumPy]{.blue} é uma biblioteca Python usada para trabalhar com arrays.

\

```{python}
import numpy as np
A = np.array([[1, 2], [4, 5]])
A
```

```{python}
B = np.array([[7, 8], [9, 10]])
B
```
:::
::: {.column}
- Soma
```{python}
np.add(A, B)
```

- Multiplicação
```{python}
np.dot(A, B)
```

- Transposto
```{python}
np.transpose(A)
```
:::
:::

## Calculando o inverso de uma matriz

\

```{python}
matrix = np.array([[1, 2], [3, 4]])
np.linalg.inv(matrix)
```

## Resolução de sistemas lineares

\

::: {.columns}
::: {.column}
$$
\begin{cases} 
x_1 + 2x_2 = 5 \\ 
3x_1 - 5x_2 = 4 \\ 
\end{cases}
$$

\

Forma matricial:
$$
Ax = b
$$

A solução de um sistema linear pode ser encontrada através:
$$
x = A^{-1}b
$$
:::
::: {.column}

```{python}
A = np.array([[1, 2], [3, -5]])
b = np.array([5, 4])
np.dot(np.linalg.inv(A), b)
```
:::
:::

## Resolução de sistemas lineares

\

$$
\begin{cases} 
10x + 7y + 8z + 7w = 32\\
7x + 5y + 6z + 5w = 23\\
8x + 6y + 10z + 9w = 33\\
7x + 5y + 9z + 10w = 31\\
\end{cases}
$$

## Regressão linear

> A [regressão linear]{.blue} é uma técnica estatística usada para prever o valor de uma variável com base no valor de outra variável. A variável que você deseja prever é chamada de variável dependente, e a variável que você está utilizando para prever o valor da outra variável é chamada de variável independente.

::: {.columns}
::: {.column}
A [forma matricial]{.blue} para se resolver uma regressão linear

$$
\hat{\beta} = (X'X)^{-1}X'y
$$
:::
::: {.column}

```{python}
#| echo: false
import numpy as np
import pandas as pd
from plotnine import (
  ggplot, aes, geom_point, geom_smooth, geom_abline, theme, element_text
)
df = {"x": [-2, -2, -1, -1, 0, 0, 1, 1, 2, 2], "y": [0, 0, 2, 3, 4, 4, 5, 6, 8, 8]}
(
  ggplot(pd.DataFrame(df), aes("x", "y"))
  + geom_point()
  + geom_smooth(method="lm", formula="y~x", se=False)
  + geom_abline(intercept=4, slope=2.1)
  + geom_abline(intercept=4.2, slope=2.3)
  + geom_abline(intercept=3.7, slope=1.7)
  + theme(text = element_text(
        size = 22,
        family = "IBM Plex Sans"
    ))
)
```
:::
:::

## Exercício

\

Aplicar a fórmula matricial da regressão nos dados a seguir

```{python}
X = [-2, -2, -1, -1, 0, 0, 1, 1, 2, 2]
y = [0, 0, 2, 3, 4, 4, 5, 6, 8, 8]
```

Os valores de `X` devem ser rearranjados para:

```{python}
X = [[1, -2], [1, -2], [1, -1], [1, -1], [1, 0], [1, 0], [1, 1], [1, 1], [1, 2], [1, 2]]
```

# Leitura e escrita de arquivos

## Leitura de arquivos

\

```{python}
#| eval: false
arquivo = open("arquivo.txt", "r")
conteudo = arquivo.read()
print(conteudo)
arquivo.close()
```

\

```{python}
#| eval: false
arquivo = open("arquivo.txt", "r")
texto = []
while True:
  linha = arquivo.readline()
  if not linha:
    break
  texto.append(linha.rstrip("\n"))
arquivo.close()
```

## Leitura de arquivos

\

A estutura `with` serve para fechar de forma automática o arquivo que foi aberto com a função `open`

\

```{python}
#| eval: false
with open("arquivo.txt", "r") as f:
  conteudo = f.read()
print(conteudo)
```

## Escrita de arquivos

\

```{python}
#| eval: false
with open("arquivo.txt", "w") as f:
  f.write("olá mundo!")
```

## Escrita e leitura de arquivos com estruturas Python

\

### Escrita

```{python}
#| eval: false
from pickle import dump
data = {
    'a': [1, 2.0, 3+4j],
    'b': ("character string"),
    'c': {None, True, False}
}

with open('data.pickle', 'wb') as f:
  dump(data, f)
```

\

### Leitura

```{python}
#| eval: false
from pickle import load
with open('data.pickle', 'rb') as f:
  data = load(f)
```